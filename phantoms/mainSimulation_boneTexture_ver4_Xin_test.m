% Main Bone Texture Simulation Pipeline - SINGLE Generation using BVF
% (bone volume fraction) as threshold parameter
% *************************************************************************
% This the main code to generate VORONOI bone models:
%   - Add Edges, add plates
%   - Code is generalized to accomedate generation of different bone types.
%   - Control parameters at the top for bone model
%   - Export Dicom slices (optional!)
%
% NOTE: the threshold generated I sometimes modified slightly to create different models. Refer
%       to the document file where I wrote down all the parameters I used for the various models generated.
%
% *************************************************************************
% Last modified: Nada Kamona, Qin Li 09/28/2018

%% Clear variables and workspace
clc; clear;

%% Set parameters of interest

for img_realization = 30:(5*6)
    
    close all force
    clearvars -except img_realization
    
    disp(['volume realization: ' num2str(img_realization)])
    
    % File paths where results are to be saved
    % filepath_MATfile = '/raidb/qli/BoneTexture_2018/Mat_files/'; % where .mat files are saved(optional)
    filepath_DICOMfile = ['output_dcm_v4_' num2str(img_realization)];
    filepath_MATfile = ['output_mat_v4_' num2str(img_realization)];
    mkdir(filepath_MATfile)
    % filepath_DICOMfile = '/Users/xinxu/Desktop/ver4_model_test/';
    HUScaleRange4dicomFiles = [0, 1000];
    
    % Choose bone type:
    flag_isotropic = 0;
    flag_vertebral = 1;
    flag_femur = 0;
    flag_sph = 0;
    flag_bonetypes = [flag_isotropic, flag_vertebral, flag_femur, flag_sph];
    
    % Other flag:
    flag_plot3D = 0;
    flag_plot2D = 0;
    Flag_addPlates = 1; plateStrength = 0.3; % does not do much ..
    flag_saveMATfile = 1;
    flag_exportDicom = 0;                                                                                                                                                          ; %export dicom slices
    flag_adjustThreshold = 0; % flag to decrease the threshold that's automatically generated by createBoneObject function
    adjustThreshold = 0.20; % 0.2 is the value I used for some of the poster models (RODS-only)
    % 0.45 is the value I used for plates model
    flag_pointsDistr = 0;   % 0 = distribute points across M slices (XY planes), then generate Z randomly within each slice
    % 0.5 = XYZ coordinates are generated randomly.
    % 1 = distribute ALL points in X-Y plane (cvt_square_nonuniform), generate Z coordinates randomly
    % 2 = distribute points in a regular lattice, then perturb (NOT WORKING)
    plot3D_pad = 8; % pixels to crop from the beginning and end of the 3D plot, to plot a subsection of the object
    crop_dim = 20;
    
    % Bone parameters
    target_tbsp = 1; % targeting tb.sp
    boneProps.delta = 0.05; % targeting object resolution
    sliceHeight = 36; radius0 = 6;
    numPoints = round(((sliceHeight*(2*radius0)^2)^(1/3)/target_tbsp)^3);
    boneProps.dimX = 2*radius0/boneProps.delta;
    boneProps.dimZ = sliceHeight/boneProps.delta;
    boneProps.deltaX = boneProps.delta; %mm per pixel
    boneProps.deltaZ = boneProps.delta;
    
    boneProps.delta_final = 0.05;
    resize_scale = boneProps.delta/boneProps.delta_final;
    flag_resize = resize_scale > 1;
    
    
    
    
    % Bone threshold factor: It was 7 originally for the poster work
    %boneThreshFactor = 7; % increasing it will decrease the threshold, which means bone thickness is increased
    bvf = 0.1; %between 0 to 1
    
    % Smoothing Parameters:
    k_size = 3; %dilation kernel size
    smoothType = 2; %type 1: smoothing without bwdist func, type 2: smoothing with bwdist func, type 3: convolution + smoothn
    smoothnScale = 0.25;
    
    % Set cvt parameters:
    cvtfunc.generator_num = numPoints; %basically how many voronoi points on the diagram
    cvtfunc.iteration_num = 50; % have it between 20 and 50. 150 for femur
    cvtfunc.samplepoints_num = 5000; %A value of 1,000 is too low.  A value of 1,000,000 is somewhat high
    
    % sliceHeight = 8; radius0 = 8; % unit = mm
    % numPoints = sliceHeight*(2*radius0)^2*numPermm3;
    % boneProps.dimX = 320; % Bone Properties
    % boneProps.dimZ = round(boneProps.dimX*sliceHeight/radius0/2);
    % boneProps.deltaX = 2*radius0/boneProps.dimX; %mm per pixel
    % boneProps.deltaZ = sliceHeight/boneProps.dimZ;
    % boneProps.delta = min([boneProps.deltaX, boneProps.deltaZ]);
    
    
    % Specific Bone Parameters:
    %   1) Isotropic:
    pointDistr_func_iso = []; % leave empty to use the default
    %   2) vertebral:
    pointDistr_func_ver = @(x,y) 1; % uniform
    %   3) femur:
    pointDistr_func_fem = @(x,y)sqrt(x.^4+y.^4);
    femurParameters.w0 = 1;    % fumerParameters:
    femurParameters.w0sigma = 0.25;
    femurParameters.w0beta = 10; %smaller beta -> less points
    femurParameters.fmu = 1;
    femurParameters.fsigma = 0.31;% original is simga = 0.25, which controls how wide the hollow part is, higher sigma gives narrow center
    
    % Rod Dropping Parameters (Could work for all bone types):
    alpha_angleKeep = pi/4; %pi/2 and 10 for isotropic, pi/16 and 1 for femur
    beta_angleDrop = 10; % not really changing anything?
    
    weights_beta = 1; %original is beta=1
    weights_alpha = 1; %original is alpha = 1
    edgeWeightsFunc(1:50) = weights_alpha*exp(-weights_beta*(1:9/49:10))+1; % original +1
    edgeWeightsFunc(51:100)=edgeWeightsFunc(50:-1:1);
    % alpha = 1;
    % edgeWeightsFunc(6:50) = alpha*cos(linspace(0,pi,50-6+1))+2;
    % edgeWeightsFunc(51:95)=edgeWeightsFunc(50:-1:6);
    % edgeWeightsFunc(1:5) = alpha+2; % max value
    % edgeWeightsFunc(96:100) = alpha+2;
    
    % Plates Parameters:
    nbofPixel_threshold = 0;
    plateArea_threshold = nbofPixel_threshold*boneProps.deltaX^2;
    addPlatesProb = 0.3; % between 0-1; probability of adding plates that satisfy pre-specified condition
    
    
    %% Main Loop
    BoneObj_notSmooth_RodsPlates = [];
    bone_thresh_plates = 0;
    for bonetype_idx = 1:length(flag_bonetypes)
        if ~flag_bonetypes(bonetype_idx)
            continue;
        end
        
        switch bonetype_idx
            case 1
                boneProps.bonetype = 'isotropic';
                % Create Veronoi points and find bounded points only
                [V, C, V_bounded_idx, pointsCoordinates] = makeIsotropicBone( ...
                    cvtfunc, sliceHeight, radius0, flag_pointsDistr, pointDistr_func_iso);
                %radius0 = sliceHeight/2;
                
            case 2
                boneProps.bonetype = 'vertebral';
                randR = 0.4;
                [V, C, V_bounded_idx, pointsCoordinates] = makeVertebralBone_test_201908_1( ...
                    cvtfunc, sliceHeight, pointDistr_func_ver, radius0, randR);
                %radius0 = sliceHeight/2;
                
            case 3
                
                boneProps.bonetype = 'femur';
                randR = 0.15; K_size = 3
                [V, C, V_bounded_idx, pointsCoordinates] = makeFemurBone( ...
                    cvtfunc, sliceHeight, radius0, flag_pointsDistr, pointDistr_func_fem, randR);
                %radius0 = sliceHeight;
                
            case 4
                randR = 0.6;
                boneProps.bonetype = 'spherical_control';
                [V, C, V_bounded_idx, pointsCoordinates] = makeIrregular_SPH( ...
                    cvtfunc, sliceHeight, radius0, randR);
                %radius0 = sliceHeight/2;
                
        end
        
        % find unique edges
        %uniq_edges = findUniqueEdges(C, V_bounded_idx);
        max_edge_per_face = 8;
        [uniq_edges, uniq_faces] = findUniqueEdges_qli(V, C, V_bounded_idx, max_edge_per_face);
        
        
        % Randomly drop rods based on the bone type
        [uniq_edges_final, isPrune, abs_cos] = RandAddRods_201908_1(V, uniq_edges, radius0, ...
            alpha_angleKeep, beta_angleDrop, femurParameters, boneProps.bonetype);
        %uniq_edges_final = uniq_edges;
        
        all_faces = get_face_property(uniq_faces, V, uniq_edges_final, isPrune);
        
        
        % Set up mesh (X1,X2,X3) and resolution (delta)
        [boneProps.MeshX, ~, ~] = meshgrid(...
            ([1:boneProps.dimX]/boneProps.dimX-0.5)*2*radius0,...
            ([1:boneProps.dimX]/boneProps.dimX-0.5)*2*radius0, ...
            ([1:boneProps.dimZ]/boneProps.dimZ)*sliceHeight);
        
        % perturb V to break the voronoi property
        %     xx = V(:,1); yy = V(:,2); zz = V(:,3);
        %     delta = 0.3; randR1 = 0.15; randRx = 1; randRy = 1; randRz = 4;
        %     allTheta = rand(size(xx))*pi; allPhi = rand(size(xx))*2*pi; allR = randR1*delta*rand(size(xx));
        %     xx = xx+randRx*allR.*sin(allTheta).*sin(allPhi);
        %     yy = yy+randRy*allR.*sin(allTheta).*cos(allPhi);
        %     zz = zz+randRz*allR.*cos(allTheta);
        %     V = [xx(:), yy(:), zz(:)];
        
        % Add plates
        if Flag_addPlates
            %[objImg_wplates, numPlatesFilled] = RandAddPlates(V, C, V_bounded_idx, boneProps, plateArea_threshold);
            %[objImg_wplates, numPlatesFilled, idxPlatesFilled] = RandAddPlates_qli_test_201908_1(V, uniq_faces, boneProps, plateArea_threshold, addPlatesProb);
            [objImg_wplates, numPlatesFilled, idxPlatesFilled, conn_plates, idxLongPlatesFilled] = RandAddPlates_qli_test_201908_2(V, all_faces, boneProps, plateArea_threshold, addPlatesProb);
            
            numPlatesFilled
        else
            objImg_wplates = [];
        end
        
        % Create the object by adding rods and plates (if turned on)
        rodExtension = [];
        [objImg_wRods, edgePoints_idx] = createBoneObject_201908_1(V, uniq_edges_final,boneProps, edgeWeightsFunc, rodExtension);
        
        % add createBoneObject and RandAddPlates
        if ~isempty(objImg_wplates)
            % Add rods and plates
            %         objImg_wplates = objImg_wplates*(max(objImg_wRods(:))/max(objImg_wplates(:)));
            %         objImg_wplates(find(objImg_wplates>0)) = objImg_wplates(find(objImg_wplates>0))+0.5*max(objImg_wRods(:));
            %         BoneObj_notSmooth_RodsPlates = objImg_wRods + objImg_wplates;
            %         BoneObj_notSmooth_Rods = objImg_wRods;
            
            objImg_wplates = plateStrength*objImg_wplates*(max(objImg_wRods(:)));
            BoneObj_notSmooth_RodsPlates = objImg_wRods + objImg_wplates;
            BoneObj_notSmooth_Rods = objImg_wRods;
        else
            % Rods only - No plates
            BoneObj_notSmooth_Rods = objImg_wRods;
        end
        
        % resize to achieve certain resolution
        if flag_resize
            if ~isempty('BoneObj_notSmooth_RodsPlates')
                BoneObj_notSmooth_RodsPlates = imresizen(BoneObj_notSmooth_RodsPlates,resize_scale);
            else
                BoneObj_notSmooth_Rods = imresizen(BoneObj_notSmooth_Rods,resize_scale);
            end
        end
        
        % Smooth the final bone texture
        
        if ~isempty(BoneObj_notSmooth_RodsPlates)
            [BoneObj_smooth_RodsPlates, bone_thresh_plates] = smoothingBoneObject_bvf(...
                BoneObj_notSmooth_RodsPlates, k_size, smoothnScale, smoothType,bvf,crop_dim);
        else
            [BoneObj_smooth_Rods, bone_thresh_rods] = smoothingBoneObject_bvf(...
                BoneObj_notSmooth_Rods, k_size, smoothnScale, smoothType,bvf,crop_dim);
            
        end
        %     %% Threshold adjustment (Optional)
        %     if flag_adjustThreshold
        %         if ~isempty(BoneObj_notSmooth_RodsPlates)
        %             bone_thresh_plates = bone_thresh_plates - adjustThreshold*bone_thresh_plates;
        %             disp('threshold adjusted')
        %         else
        %             bone_thresh_rods = bone_thresh_rods - adjustThreshold*bone_thresh_rods;
        %             disp('threshold adjusted')
        %         end
        %         %bone_thresh = bone_thresh - 0.55*bone_thresh;
        %     end
        
        
        %% Saving the model (Optional)
        if flag_saveMATfile
            % filename for the .mat matrix (if save flag is on):
            rightnow = clock;
            year = sprintf('%04d',rightnow(1)); % for older versions of matlab
            month = sprintf('%02d',rightnow(2));
            day = sprintf('%02d',rightnow(3));
            hour = sprintf('%02d',rightnow(4));
            minute = sprintf('%02d',rightnow(5));
            
            if exist('bone_thresh_rods')
                final_thresh = bone_thresh_rods;
            else
                final_thresh = bone_thresh_plates;
            end
            filename = [year,month,day,'_',hour,'_',minute,'_',boneProps.bonetype,...
                '_VoronoiBone_seeds',num2str(numPoints),'_thresh',num2str(round(final_thresh,2)),...
                '_dim',num2str(boneProps.dimX),'_H',num2str(sliceHeight),'.mat'];
            
            save([filepath_MATfile,filename]);
        end
        %% Export DICOM slices (Optional)
        if flag_exportDicom
            if exist('BoneObj_smooth_Rods')
                output = BoneObj_smooth_Rods;
            else
                output = BoneObj_smooth_RodsPlates;
            end
            output = output(crop_dim+1:end-crop_dim, crop_dim+1:end-crop_dim, crop_dim+1:end-crop_dim);
            if exist('bone_thresh_rods')
                final_thresh = bone_thresh_rods;
            else
                final_thresh = bone_thresh_plates;
            end
            %         exportBone2dicom(filepath_DICOMfile,output,final_thresh,bvf, HUScaleRange4dicomFiles, ...
            %             sliceHeight, boneProps,numPoints);
        end
    end
    clear bonetype_idx uniq_edges
    
    %% 2D visualization
    if flag_plot2D
        figure(3)
        Object_xz = permute(BoneObj_smooth_RodsPlates, [3 1 2]);
        Object_yz = permute(BoneObj_smooth_RodsPlates, [3 2 1]);
        for i = 1:size(BoneObj_smooth_RodsPlates,3)
            subplot(231)
            imagesc(BoneObj_smooth_RodsPlates(:,:,i)>bone_thresh_plates); axis square
            title(i)
            if i <= size(BoneObj_smooth_RodsPlates,1)
                subplot(232)
                imagesc(Object_xz(:,:,i)>bone_thresh_plates); axis square
                title('xz view')
                subplot(233)
                imagesc(Object_yz(:,:,i)>bone_thresh_plates); axis square
                title('yz view')
            end
            pause(0.1)
        end
        % center view
        subplot(234)
        imagesc(BoneObj_smooth_RodsPlates(:,:,round(i/2))>bone_thresh_plates); axis square; title('center xy view')
        subplot(235)
        imagesc(Object_xz(:,:,round(size(Object_xz,3)/2))>bone_thresh_plates); axis square; title('center xz view')
        subplot(236)
        imagesc(Object_yz(:,:,round(size(Object_yz,3)/2))>bone_thresh_plates); axis square; title('center yz view')
        
        
    end
    
    %% 3D Visualization
    if flag_plot3D
        if (0)
            figure(1)
            subplot(131)
            plot3(pointsCoordinates(:,1), pointsCoordinates(:,2), pointsCoordinates(:,3),'.')
            axis equal
            axis([-radius0 radius0 -radius0 radius0 0 sliceHeight])
            
            subplot(132)
            for i = 1:size(uniq_faces,1) % go row by row (each row is a face)
                % Create a convex hull that contains all the vertices in the current
                % cell (a region)
                tmp = uniq_faces(i,:);
                poly_idx = tmp(tmp>0);
                poly_idx = [poly_idx, poly_idx(1)];
                plot3(V(poly_idx,1), V(poly_idx,2), V(poly_idx,3),'g')
                hold on
                if ismembertol(i,idxPlatesFilled)
                    fill3(V(poly_idx,1), V(poly_idx,2), V(poly_idx,3),'r','facealpha',0.3)
                end
            end
            axis equal
            axis([-radius0 radius0 -radius0 radius0 0 sliceHeight])
            subplot(133)
            for i = 1:length(uniq_edges_final)
                vvv1 = V(uniq_edges_final(i,1),:);
                vvv2 = V(uniq_edges_final(i,2),:);
                vvvx = [vvv1(1), vvv2(1)];
                vvvy = [vvv1(2), vvv2(2)];
                vvvz = [vvv1(3), vvv2(3)];
                plot3(vvvx, vvvy, vvvz,'g'); hold on
            end
            axis equal
            for i = 1:size(uniq_faces,1) % go row by row (each row is a face)
                if ismembertol(i,idxLongPlatesFilled)
                    tmp = uniq_faces(i,:);
                    poly_idx = tmp(tmp>0);
                    poly_idx = [poly_idx, poly_idx(1)];
                    fill3(V(poly_idx,1), V(poly_idx,2), V(poly_idx,3),'r','facealpha',0.3); hold on
                end
            end
            idxRandPlatesFilled = setdiff(idxPlatesFilled, idxLongPlatesFilled);
            for i = 1:size(uniq_faces,1) % go row by row (each row is a face)
                if ismembertol(i,idxRandPlatesFilled)
                    tmp = uniq_faces(i,:);
                    poly_idx = tmp(tmp>0);
                    poly_idx = [poly_idx, poly_idx(1)];
                    fill3(V(poly_idx,1), V(poly_idx,2), V(poly_idx,3),'b','facealpha',0.3); hold on
                end
            end
            axis([-radius0 radius0 -radius0 radius0 0 sliceHeight])
        end
        
        
        figure(2)
        % Display rods and plates
        if ~isempty(BoneObj_notSmooth_RodsPlates)
            BoneObj_smooth_Cropped = BoneObj_smooth_RodsPlates(plot3D_pad:end-plot3D_pad,plot3D_pad:end-plot3D_pad, plot3D_pad:end-plot3D_pad); %crop middle region
            [m0,n0,p0] = size(BoneObj_smooth_Cropped);
            Im_tmp = ones(m0,n0,p0+3);
            Im_tmp(:,:,4:end) = BoneObj_smooth_Cropped;
            [m1,n1,p1] = size(Im_tmp);
            % add caps to edges
            Im2display = zeros(m1+4, n1+4, p1+4);
            Im2display(3:end-2,3:end-2,3:end-2) = Im_tmp;
            [m,n,p] = size(Im2display);
            [X,Y,Z] = meshgrid(1:n,1:m,1:p);
            fv = isosurface(X,Y,Z,Im2display,bone_thresh_plates,'verbose');
            %
            p = patch(fv);
            isonormals(X,Y,Z,Im2display,p);
            p.FaceColor = 'red';
            p.EdgeColor = 'none';
            daspect([1,1,1]);
            view(3); axis tight; camlight; lighting gouraud;
            title(sprintf('%s: wPLATES dim = %0.2f, H0 = %0.2f, R0 = %0.2f,\n alpha_angleKeep = %0.2f, beta_angleDrop = %0.2f,\n smoothType = %i, NumPoints = %i, flagDistr = %0.1f\n itr=%i, weights alpha = %0.2f, weightsbeta = %0.2f',...
                boneProps.bonetype, boneProps.dimX, sliceHeight, radius0, alpha_angleKeep, beta_angleDrop, smoothType,...
                numPoints,flag_pointsDistr, cvtfunc.iteration_num, weights_alpha, weights_beta));
            
            %if no plates, display rods only
        else
            % add panel to it
            BoneObj_smooth_Cropped = BoneObj_smooth_Rods(plot3D_pad:end-plot3D_pad,plot3D_pad:end-plot3D_pad, plot3D_pad:end-plot3D_pad); %crop middle region
            [m0,n0,p0] = size(BoneObj_smooth_Cropped);
            Im_tmp = ones(m0,n0,p0+3);
            Im_tmp(:,:,4:end) = BoneObj_smooth_Cropped;
            [m1,n1,p1] = size(Im_tmp);
            % add caps to edges
            Im2display = zeros(m1+4, n1+4, p1+4);
            Im2display(3:end-2,3:end-2,3:end-2) = Im_tmp;
            [m,n,p] = size(Im2display);
            [X,Y,Z] = meshgrid(1:n,1:m,1:p);
            fv = isosurface(X,Y,Z,Im2display,bone_thresh_rods,'verbose');
            %
            p = patch(fv);
            isonormals(X,Y,Z,Im2display,p);
            p.FaceColor = 'red';
            p.EdgeColor = 'none';
            daspect([1,1,1]);
            view(3); axis tight; camlight; lighting gouraud;
            title(sprintf('%s RODS only: dim = %0.2f, H0 = %0.2f, R0 = %0.2f,\n alpha angleKeep = %0.2f, beta angleDrop = %0.2f,\n smoothType = %i, NumPoints = %i, flagDistr = %0.1f\n itr=%i, weights alpha = %0.2f, weightsbeta = %0.2f',...
                boneProps.bonetype, boneProps.dimX, sliceHeight, radius0, alpha_angleKeep, beta_angleDrop, smoothType,...
                numPoints,flag_pointsDistr, cvtfunc.iteration_num, weights_alpha, weights_beta));
        end
        
        save([filepath_MATfile filesep 'BoneObj_smooth_Cropped'],'BoneObj_smooth_Cropped')
        
    end
end


