#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 24 21:20:28 2022

@author: qcao

https://vtk.org/pipermail/vtkusers/2007-December/044165.html

https://python.hotexamples.com/examples/vtk/-/vtkPolyDataToImageStencil/python-vtkpolydatatoimagestencil-function-examples.html

https://www.cb.uu.se/~aht/Vis2014/lecture2.pdf

https://github.com/bpinsard/misc/blob/master/surf_fill.py

https://discourse.vtk.org/t/slow-voxelisation-with-vtkpolydatatoimagestencil/5571

https://kitware.github.io/vtk-examples/site/Cxx/PolyData/PolyDataToImageData/

# based on test_vtk_rasterize

"""

import numpy as np
import scipy.ndimage
import matplotlib.pyplot as plt

import sys
sys.path.append("../bonebox/phantoms/") # TODO: remove this when incorporated into library

from TrabeculaeVoronoi import *

import vtk
from vtk.util import numpy_support

import edt

def voxelize_surface(vertices, polys, dims, spacing, origin=None, value=1):
    """
    Surface rasterization in 3D using VTK
    
    vertices are in array coordinates
    dims is the shape of image
    
    """
    
    if origin is None:
        origin = -np.array(dims)*np.array(spacing)/2
    
    # vtkPoints
    vertices = vertices
    points = vtk.vtkPoints()
    points.SetNumberOfPoints(len(vertices))
    for i, pt in enumerate(vertices):
        points.InsertPoint(i, pt)
        
    # vtkCellArray
    tris  = vtk.vtkCellArray() # triangles
    for vert in polys:
        tris.InsertNextCell(len(vert))
        for v in vert:
            tris.InsertCellPoint(v)

    # vtkPolyData
    pd = vtk.vtkPolyData()
    pd.SetPoints(points)
    pd.SetPolys(tris)
    del points, tris

    # vtkImageData
    whiteimg = vtk.vtkImageData()
    whiteimg.SetDimensions(dims)
    whiteimg.SetSpacing(spacing)
    whiteimg.SetOrigin(origin) # Does not seem to be setting the origin correctly

    # vtkInformation -> SetPointDataActiveScalarInfo
    info = vtk.vtkInformation()
    whiteimg.SetPointDataActiveScalarInfo(info, vtk.VTK_UNSIGNED_CHAR, value)
    
    # PointData -> SetScalars
    ones = np.ones(np.prod(dims),dtype=np.uint8)
    whiteimg.GetPointData().SetScalars(numpy_support.numpy_to_vtk(ones))
    
    # vtkPolyDataToImageStencil
    pdtis = vtk.vtkPolyDataToImageStencil()
    pdtis.SetInputData(pd)
    pdtis.SetOutputSpacing(whiteimg.GetSpacing())
    pdtis.SetOutputOrigin(whiteimg.GetOrigin())
    pdtis.SetOutputWholeExtent(whiteimg.GetExtent())
    pdtis.Update()

    imgstenc = vtk.vtkImageStencil()
    imgstenc.SetInputData(whiteimg)
    imgstenc.SetStencilConnection(pdtis.GetOutputPort())
    imgstenc.SetBackgroundValue(0)

    imgstenc.Update()
    
    data = numpy_support.vtk_to_numpy(
        imgstenc.GetOutput().GetPointData().GetScalars()).reshape(dims).transpose(2,1,0)
    
    del pd,vertices,whiteimg,pdtis,imgstenc
    return data

def voxelize_plates_gaussian(vertices, faces, dims, spacing, sigma):
    
    volume = np.zeros(dims,dtype=float)
    
    for ind, face in ernumerate(faces):
        dv = voxelize_surface(vertices[face,:], [[0,1,2],], dims, spacing, origin=None, value=1)
        scipy.ndimage(dv, sigma[ind])
        volume += dv
        
    return volume

def voxelize_rods_gaussian(vertices, edges, dims, spacing, sigma):
    
    volume = np.zeros(dims,dtype=float)
    
    for ind, edge in ernumerate(edges):
        dv = makeSkeletonVolumeEdges(vertices[edges,:], [[0,1],], spacing, dims)
        scipy.ndimage(dv, sigma[ind])
        volume += dv
        
    return volume
    

if __name__ == "__main__":

    dims = (500,500,500) # volumeSizeVoxels
    spacing = (1,1,1) # voxelSize
    
    # triangular mesh ()
    vertices = np.array([[0,50,-50],[0,50,50],[0,0,20]]).astype(float)
    face = np.array([[0,1,2],])
    volume0 = voxelize_surface(vertices, face, dims, spacing)
    
    vertices = np.array([[0,-120,-120],[0,120,120],[120,120,0]]).astype(float)
    line = np.array([[0,1],])
    # volume1 = voxelize_line(vertices, line, dims, spacing)
    volume1 = makeSkeletonVolumeEdges(vertices, line, spacing, dims)
    
    volume = volume0 + volume1
    
    fig = plt.figure()
    plt.imshow(volume[250,:,:])
    
